var title = "Pure alcohol consumption<br>among adults (ages 15+) in 2010";

var y2 = [
  -1.040e+0,
  1.970e-1,
  -9.770e-1,
  1.000e+0,
  -2.240e+0,
  -7.890e-1,
  6.360e+0,
  -2.920e+0,
  -6.940e-1,
  2.690e+0,
  1.360e+0,
  -2.340e+0,
  -1.870e+0,
  4.610e+0,
  -7.970e+0,
  -2.980e+0,
  4.130e+0,
  8.810e-1,
  2.210e+0,
  -1.770e+0,
];
var y1 = [
  1.230e+0,
  2.570e+0,
  2.000e+0,
  1.720e+0,
  -7.550e-1,
  -3.120e-1,
  3.730e+0,
  1.410e+0,
  3.910e-1,
  -3.160e+0,
  1.740e+0,
  -3.230e+0,
  -8.470e-2,
  2.070e+0,
  4.970e-1,
  1.040e+0,
  -1.650e+0,
  3.080e+0,
  8.240e-1,
  8.860e-1,
];
var y0 = [
  6.620e-2,
  -1.470e-1,
  -5.010e-1,
  -1.160e+0,
  1.390e+0,
  7.410e-1,
  4.060e-1,
  -6.750e-1,
  6.010e-1,
  3.400e-1,
  1.600e+0,
  -1.520e+0,
  1.100e+0,
  -9.700e-1,
  -9.960e-1,
  -6.580e-2,
  -6.910e-1,
  -1.890e+0,
  -1.520e+0,
  -2.050e+0,
];

var data = [];

var layout1 = [];

var yData = [];

var countries = [
	"Belarus", 
	"Moldova", 
	"Lithuania", 
	"Russia", 
	"Romania", 
	"Ukraine", 
	"Andorra", 
	"Hungary", 
	"Czech Republic", 
	"Slovakia", 
	"Portugal", 
	"Serbia", 
	"Grenada", 
	"Poland", 
	"Latvia", 
	"Finland", 
	"South Korea", 
	"France", 
	"Australia", 
	"Croatia", 
	"Ireland", 
	"Luxembourg", 
	"Germany", 
	"Slovenia", 
	"United Kingdom", 
	"Denmark", 
	"Bulgaria", 
	"Spain", 
	"Belgium", 
	"South Africa", 
	"New Zealand", 
	"Gabon", 
	"Namibia", 
	"Switzerland", 
	"Saint Lucia", 
	"Austria", 
	"Estonia", 
	"Greece", 
	"Kazakhstan", 
	"Canada", 
	"Nigeria", 
	"Netherlands", 
	"Uganda", 
	"Rwanda", 
	"Chile", 
	"Argentina", 
	"Burundi", 
	"United States", 
	"Cyprus", 
	"Sweden", 
	"Venezuela", 
	"Paraguay", 
	"Brazil", 
	"Sierra Leone", 
	"Montenegro", 
	"Belize", 
	"Cameroon", 
	"Botswana", 
	"Saint Kitts and Nevis", 
	"Guyana", 
	"Peru", 
	"Panama", 
	"Niue", 
	"Palau", 
	"Norway", 
	"Tanzania", 
	"Georgia", 
	"Uruguay", 
	"Angola", 
	"Laos", 
	"Japan", 
	"Mexico", 
	"Ecuador", 
	"Dominica", 
	"Iceland", 
	"Thailand", 
	"Bosnia and Herzegovina", 
	"Sao Tome and Principe", 
	"Malta", 
	"Albania", 
	"Bahamas", 
	"Dominican Republic", 
	"Mongolia", 
	"Cape Verde", 
	"Barbados", 
	"Burkina Faso", 
	"Italy", 
	"Trinidad and Tobago", 
	"China", 
	"Macedonia", 
	"Saint Vincent and the Grenadines", 
	"Equatorial Guinea", 
	"Suriname", 
	"Vietnam", 
	"Lesotho", 
	"Haiti", 
	"Cook Islands", 
	"Colombia", 
	"Ivory Coast", 
	"Bolivia", 
	"Swaziland", 
	"Zimbabwe", 
	"Seychelles", 
	"Cambodia", 
	"Puerto Rico", 
	"Netherlands Antilles", 
	"Philippines", 
	"Costa Rica", 
	"Armenia", 
	"Cuba", 
	"Nicaragua", 
	"Jamaica", 
	"Ghana", 
	"Liberia", 
	"Uzbekistan", 
	"Chad", 
	"United Arab Emirates", 
	"Kyrgyzstan", 
	"India", 
	"Turkmenistan", 
	"Kenya", 
	"Ethiopia", 
	"Honduras", 
	"Guinea-Bissau", 
	"Zambia", 
	"Republic of the Congo", 
	"Guatemala", 
	"Central African Republic", 
	"North Korea", 
	"Sri Lanka", 
	"Mauritius", 
	"Samoa", 
	"Democratic Republic of the Congo", 
	"Nauru", 
	"Gambia", 
	"Federated States of Micronesia", 
	"El Salvador", 
	"Fiji", 
	"Papua New Guinea", 
	"Kiribati", 
	"Tajikistan", 
	"Israel", 
	"Sudan", 
	"Malawi", 
	"Lebanon", 
	"Azerbaijan", 
	"Mozambique", 
	"Togo", 
	"Nepal", 
	"Brunei", 
	"Benin", 
	"Singapore", 
	"Turkey", 
	"Madagascar", 
	"Solomon Islands", 
	"Tonga", 
	"Tunisia", 
	"Tuvalu", 
	"Qatar", 
	"Vanuatu", 
	"Djibouti", 
	"Malaysia", 
	"Syria", 
	"Maldives", 
	"Mali", 
	"Eritrea", 
	"Algeria", 
	"Iran", 
	"Oman", 
	"Brunei", 
	"Morocco", 
	"Jordan", 
	"Bhutan", 
	"Guinea", 
	"Burma", 
	"Afghanistan", 
	"Senegal", 
	"Indonesia", 
	"Timor-Leste", 
	"Iraq", 
	"Somalia", 
	"Egypt", 
	"Niger", 
	"Yemen", 
	"Comoros", 
	"Saudi Arabia", 
	"Bangladesh", 
	"Kuwait", 
	"Libya", 
	"Mauritania", 
	"Pakistan"
]

var alcoholConsumed = [
  17.5, 
	16.8, 
	15.4, 
	15.1, 
	14.4, 
	13.9, 
	13.8, 
	13.3, 
	13, 
	13, 
	12.9, 
	12.6, 
	12.5, 
	12.5, 
	12.3, 
	12.3, 
	12.3, 
	12.2, 
	12.2, 
	12.2, 
	11.9, 
	11.9, 
	11.8, 
	11.6, 
	11.6, 
	11.4, 
	11.4, 
	11.2, 
	11, 
	11, 
	10.9, 
	10.9, 
	10.8, 
	10.7, 
	10.4, 
	10.3, 
	10.3, 
	10.3, 
	10.3, 
	10.2, 
	10.1, 
	9.9, 
	9.8, 
	9.8, 
	9.6, 
	9.3, 
	9.3, 
	9.2, 
	9.2, 
	9.2, 
	8.9, 
	8.8, 
	8.7, 
	8.7, 
	8.7, 
	8.5, 
	8.4, 
	8.4, 
	8.2, 
	8.1, 
	8.1, 
	8, 
	8, 
	7.9, 
	7.7, 
	7.7, 
	7.7, 
	7.6, 
	7.5, 
	7.3, 
	7.2, 
	7.2, 
	7.2, 
	7.1, 
	7.1, 
	7.1, 
	7.1, 
	7.1, 
	7, 
	7, 
	6.9, 
	6.9, 
	6.9, 
	6.9, 
	6.8, 
	6.8, 
	6.7, 
	6.7, 
	6.7, 
	6.7, 
	6.6, 
	6.6, 
	6.6, 
	6.6, 
	6.5, 
	6.4, 
	6.4, 
	6.2, 
	6, 
	5.9, 
	5.7, 
	5.7, 
	5.6, 
	5.5, 
	5.4, 
	5.4, 
	5.4, 
	5.4, 
	5.3, 
	5.2, 
	5, 
	4.9, 
	4.8, 
	4.7, 
	4.6, 
	4.4, 
	4.3, 
	4.3, 
	4.3, 
	4.3, 
	4.3, 
	4.2, 
	4, 
	4, 
	4, 
	3.9, 
	3.8, 
	3.8, 
	3.7, 
	3.7, 
	3.6, 
	3.6, 
	3.6, 
	3.5, 
	3.4, 
	3.3, 
	3.2, 
	3, 
	3, 
	3, 
	2.8, 
	2.8, 
	2.7, 
	2.5, 
	2.4, 
	2.3, 
	2.3, 
	2.3, 
	2.2, 
	2.1, 
	2.1, 
	2, 
	2, 
	1.8, 
	1.7, 
	1.6, 
	1.5, 
	1.5, 
	1.5, 
	1.4, 
	1.3, 
	1.3, 
	1.2, 
	1.2, 
	1.1, 
	1.1, 
	1, 
	1, 
	0.9, 
	0.9, 
	0.9, 
	0.7, 
	0.7, 
	0.7, 
	0.7, 
	0.7, 
	0.6, 
	0.6, 
	0.6, 
	0.5, 
	0.5, 
	0.4, 
	0.3, 
	0.3, 
	0.2, 
	0.2, 
	0.2, 
	0.1, 
	0.1, 
	0.1, 
	0.1
]

var appleStockDates = [
  "2014-01-02",
	"2014-01-03",
	"2014-01-06",
	"2014-01-07",
	"2014-01-08",
	"2014-01-09",
	"2014-01-10",
	"2014-01-13",
	"2014-01-14",
	"2014-01-15",
	"2014-01-16",
	"2014-01-17",
	"2014-01-21",
	"2014-01-22",
	"2014-01-23",
	"2014-01-24",
	"2014-01-27",
	"2014-01-28",
	"2014-01-29",
	"2014-01-30",
	"2014-01-31",
	"2014-02-03",
	"2014-02-04",
	"2014-02-05",
	"2014-02-06",
	"2014-02-07",
	"2014-02-10",
	"2014-02-11",
	"2014-02-12",
	"2014-02-13",
	"2014-02-14",
	"2014-02-18",
	"2014-02-19",
	"2014-02-20",
	"2014-02-21",
	"2014-02-24",
	"2014-02-25",
	"2014-02-26",
	"2014-02-27",
	"2014-02-28",
	"2014-03-03",
	"2014-03-04",
	"2014-03-05",
	"2014-03-06",
	"2014-03-07",
	"2014-03-10",
	"2014-03-11",
	"2014-03-12",
	"2014-03-13",
	"2014-03-14",
	"2014-03-17",
	"2014-03-18",
	"2014-03-19",
	"2014-03-20",
	"2014-03-21",
	"2014-03-24",
	"2014-03-25",
	"2014-03-26",
	"2014-03-27",
	"2014-03-28",
	"2014-03-31",
	"2014-04-01",
	"2014-04-02",
	"2014-04-03",
	"2014-04-04",
	"2014-04-07",
	"2014-04-08",
	"2014-04-09",
	"2014-04-10",
	"2014-04-11",
	"2014-04-14",
	"2014-04-15",
	"2014-04-16",
	"2014-04-17",
	"2014-04-21",
	"2014-04-22",
	"2014-04-23",
	"2014-04-24",
	"2014-04-25",
	"2014-04-28",
	"2014-04-29",
	"2014-04-30",
	"2014-05-01",
	"2014-05-02",
	"2014-05-05",
	"2014-05-06",
	"2014-05-07",
	"2014-05-08",
	"2014-05-09",
	"2014-05-12",
	"2014-05-13",
	"2014-05-14",
	"2014-05-15",
	"2014-05-16",
	"2014-05-19",
	"2014-05-20",
	"2014-05-21",
	"2014-05-22",
	"2014-05-23",
	"2014-05-27",
	"2014-05-28",
	"2014-05-29",
	"2014-05-30",
	"2014-06-02",
	"2014-06-03",
	"2014-06-04",
	"2014-06-05",
	"2014-06-06",
	"2014-06-09",
	"2014-06-10",
	"2014-06-11",
	"2014-06-12",
	"2014-06-13",
	"2014-06-16",
	"2014-06-17",
	"2014-06-18",
	"2014-06-19",
	"2014-06-20",
	"2014-06-23",
	"2014-06-24",
	"2014-06-25",
	"2014-06-26",
	"2014-06-27",
	"2014-06-30",
	"2014-07-01",
	"2014-07-02",
	"2014-07-03",
	"2014-07-07",
	"2014-07-08",
	"2014-07-09",
	"2014-07-10",
	"2014-07-11",
	"2014-07-14",
	"2014-07-15",
	"2014-07-16",
	"2014-07-17",
	"2014-07-18",
	"2014-07-21",
	"2014-07-22",
	"2014-07-23",
	"2014-07-24",
	"2014-07-25",
	"2014-07-28",
	"2014-07-29",
	"2014-07-30",
	"2014-07-31",
	"2014-08-01",
	"2014-08-04",
	"2014-08-05",
	"2014-08-06",
	"2014-08-07",
	"2014-08-08",
	"2014-08-11",
	"2014-08-12",
	"2014-08-13",
	"2014-08-14",
	"2014-08-15",
	"2014-08-18",
	"2014-08-19",
	"2014-08-20",
	"2014-08-21",
	"2014-08-22",
	"2014-08-25",
	"2014-08-26",
	"2014-08-27",
	"2014-08-28",
	"2014-08-29",
	"2014-09-02",
	"2014-09-03",
	"2014-09-04",
	"2014-09-05",
	"2014-09-08",
	"2014-09-09",
	"2014-09-10",
	"2014-09-11",
	"2014-09-12",
	"2014-09-15",
	"2014-09-16",
	"2014-09-17",
	"2014-09-18",
	"2014-09-19",
	"2014-09-22",
	"2014-09-23",
	"2014-09-24",
	"2014-09-25",
	"2014-09-26",
	"2014-09-29",
	"2014-09-30",
	"2014-10-01",
	"2014-10-02",
	"2014-10-03",
	"2014-10-06",
	"2014-10-07",
	"2014-10-08",
	"2014-10-09",
	"2014-10-10",
	"2014-10-13",
	"2014-10-14",
	"2014-10-15",
	"2014-10-16",
	"2014-10-17",
	"2014-10-20",
	"2014-10-21",
	"2014-10-22",
	"2014-10-23",
	"2014-10-24",
	"2014-10-27",
	"2014-10-28",
	"2014-10-29",
	"2014-10-30",
	"2014-10-31",
	"2014-11-03",
	"2014-11-04",
	"2014-11-05",
	"2014-11-06",
	"2014-11-07",
	"2014-11-10",
	"2014-11-11",
	"2014-11-12",
	"2014-11-13",
	"2014-11-14",
	"2014-11-17",
	"2014-11-18",
	"2014-11-19",
	"2014-11-20",
	"2014-11-21",
	"2014-11-24",
	"2014-11-25",
	"2014-11-26",
	"2014-11-28",
	"2014-12-01",
	"2014-12-02",
	"2014-12-03",
	"2014-12-04",
	"2014-12-05",
	"2014-12-08",
	"2014-12-09",
	"2014-12-10",
	"2014-12-11",
	"2014-12-12"
]

var appleStock = [
  77.44539475,
	77.04557544,
	74.89697204,
	75.856461,
	75.09194679,
	76.20263178,
	75.2301837,
	73.84891755,
	75.0113527,
	77.14481412,
	77.33058367,
	76.85652616,
	75.39394758,
	76.7763823,
	76.64038513,
	77.20512022,
	76.66007339,
	70.90497216,
	70.23598702,
	70.03463724,
	69.00470795,
	70.04050186,
	70.50025256,
	70.599595,
	71.50652865,
	73.09834283,
	72.71181988,
	74.38994589,
	75.2743945,
	74.9602296,
	76.05688873,
	76.55140204,
	76.37468597,
	74.7279776,
	74.69710728,
	73.34314093,
	74.21622457,
	73.40762211,
	72.50368071,
	74.17817422,
	73.38154805,
	74.44635193,
	74.43810354,
	74.69600358,
	74.46113283,
	74.07111203,
	75.07027178,
	74.93559065,
	75.35199472,
	74.13480798,
	73.98459392,
	73.7289236,
	74.62019501,
	74.28682958,
	74.57820913,
	75.48205234,
	75.92068662,
	76.62498351,
	75.70890299,
	75.47469806,
	75.5990936,
	75.39461719,
	76.03616773,
	75.90452792,
	75.68018051,
	74.02790571,
	73.62532898,
	73.27327651,
	74.39941392,
	72.7644772,
	73.1708442,
	72.94387096,
	72.62541762,
	72.897474,
	73.65263437,
	74.06474967,
	74.17426241,
	79.66168695,
	79.14119558,
	80.30519282,
	83.23767089,
	83.08750733,
	82.99289917,
	83.04635189,
	82.73311868,
	84.3659999,
	83.449361,
	82.92665266,
	82.40901903,
	82.82714134,
	83.46187012,
	83.516998,
	83.83894399,
	82.98805242,
	84.28974015,
	85.22180467,
	85.13035972,
	85.51554663,
	85.61005813,
	86.82546553,
	88.25336036,
	88.51837168,
	89.94207773,
	89.37862849,
	88.59990714,
	89.8695301,
	91.09787905,
	91.62042691,
	91.483127,
	93.48368488,
	92.89646175,
	92.80705602,
	90.98790535,
	90.30905531,
	91.09697763,
	91.05881862,
	91.07433595,
	90.64769552,
	90.12358031,
	89.55380483,
	89.02197543,
	89.18693839,
	89.62525984,
	90.89089637,
	92.29,
	92.63486842,
	92.43474742,
	92.90402626,
	95.00793917,
	94.1893448,
	92.52683502,
	94.10816215,
	94.59776879,
	95.53059169,
	95.69111732,
	93.78457514,
	92.39063645,
	93.74625186,
	93.44052365,
	94.16331104,
	95.75986808,
	95.58074639,
	96.53575439,
	98.0275432,
	97.14618849,
	95.87943933,
	93.65612192,
	95.09971859,
	94.10684609,
	93.50276432,
	94.14628493,
	93.48395187,
	94.48592562,
	95.24942378,
	95.3589675,
	96.53139487,
	97.09066136,
	97.67554054,
	98.58924699,
	99.61107288,
	99.74008252,
	99.46843762,
	100.9479319,
	100.5856398,
	100.1891295,
	100.755422,
	102.0170498,
	102.2119748,
	102.255943,
	98.03397371,
	97.99139133,
	98.48225905,
	98.2609899,
	97.20457129,
	99.58834664,
	100.3737183,
	101.960247,
	98.97872298,
	100.4325635,
	101.0888447,
	101.449066,
	100.9639224,
	99.77669525,
	101.3166152,
	99.67815061,
	97.71828883,
	97.84195885,
	99.97950571,
	99.75834241,
	98.45517117,
	98.62148163,
	99.12728368,
	98.61442228,
	97.94679762,
	100.7057276,
	99.86032959,
	100.4975123,
	99.56654785,
	97.16647324,
	94.76582693,
	96.70139244,
	97.51183641,
	102.1754914,
	101.991238,
	103.2261528,
	104.3103307,
	103.982152,
	104.5310474,
	105.7756568,
	106.0801645,
	107.1199176,
	107.3297075,
	108.4637716,
	108.1980158,
	108.1703956,
	108.3210256,
	108.5892493,
	108.2739198,
	108.947396,
	111.363978,
	112.7040594,
	113.8188946,
	113.4959626,
	114.9869783,
	114.4555369,
	117.0458925,
	116.3870522,
	118.60425,
	117.4741866,
	118.7986564,
	118.3453741,
	113.054436,
	115.2907142,
	115.318909,
	115.5361261,
	113.6533452,
	109.7554968,
	113.9603314,
	111.8174772,
	110.0271393
]

var GDPNames = [
  "Afghanistan",
	"Albania",
	"Algeria",
	"American Samoa",
	"Andorra",
	"Angola",
	"Anguilla",
	"Antigua and Barbuda",
	"Argentina",
	"Armenia",
	"Aruba",
	"Australia",
	"Austria",
	"Azerbaijan",
	"Bahamas, The",
	"Bahrain",
	"Bangladesh",
	"Barbados",
	"Belarus",
	"Belgium",
	"Belize",
	"Benin",
	"Bermuda",
	"Bhutan",
	"Bolivia",
	"Bosnia and Herzegovina",
	"Botswana",
	"Brazil",
	"British Virgin Islands",
	"Brunei",
	"Bulgaria",
	"Burkina Faso",
	"Burma",
	"Burundi",
	"Cabo Verde",
	"Cambodia",
	"Cameroon",
	"Canada",
	"Cayman Islands",
	"Central African Republic",
	"Chad",
	"Chile",
	"China",
	"Colombia",
	"Comoros",
	"Congo, Democratic Republic of the",
	"Congo, Republic of the",
	"Cook Islands",
	"Costa Rica",
	"Cote d'Ivoire",
	"Croatia",
	"Cuba",
	"Curacao",
	"Cyprus",
	"Czech Republic",
	"Denmark",
	"Djibouti",
	"Dominica",
	"Dominican Republic",
	"Ecuador",
	"Egypt",
	"El Salvador",
	"Equatorial Guinea",
	"Eritrea",
	"Estonia",
	"Ethiopia",
	"Falkland Islands (Islas Malvinas)",
	"Faroe Islands",
	"Fiji",
	"Finland",
	"France",
	"French Polynesia",
	"Gabon",
	"Gambia, The",
	"Georgia",
	"Germany",
	"Ghana",
	"Gibraltar",
	"Greece",
	"Greenland",
	"Grenada",
	"Guam",
	"Guatemala",
	"Guernsey",
	"Guinea-Bissau",
	"Guinea",
	"Guyana",
	"Haiti",
	"Honduras",
	"Hong Kong",
	"Hungary",
	"Iceland",
	"India",
	"Indonesia",
	"Iran",
	"Iraq",
	"Ireland",
	"Isle of Man",
	"Israel",
	"Italy",
	"Jamaica",
	"Japan",
	"Jersey",
	"Jordan",
	"Kazakhstan",
	"Kenya",
	"Kiribati",
	"Korea, North",
	"Korea, South",
	"Kosovo",
	"Kuwait",
	"Kyrgyzstan",
	"Laos",
	"Latvia",
	"Lebanon",
	"Lesotho",
	"Liberia",
	"Libya",
	"Liechtenstein",
	"Lithuania",
	"Luxembourg",
	"Macau",
	"Macedonia",
	"Madagascar",
	"Malawi",
	"Malaysia",
	"Maldives",
	"Mali",
	"Malta",
	"Marshall Islands",
	"Mauritania",
	"Mauritius",
	"Mexico",
	"Micronesia, Federated States of",
	"Moldova",
	"Monaco",
	"Mongolia",
	"Montenegro",
	"Morocco",
	"Mozambique",
	"Namibia",
	"Nepal",
	"Netherlands",
	"New Caledonia",
	"New Zealand",
	"Nicaragua",
	"Nigeria",
	"Niger",
	"Niue",
	"Northern Mariana Islands",
	"Norway",
	"Oman",
	"Pakistan",
	"Palau",
	"Panama",
	"Papua New Guinea",
	"Paraguay",
	"Peru",
	"Philippines",
	"Poland",
	"Portugal",
	"Puerto Rico",
	"Qatar",
	"Romania",
	"Russia",
	"Rwanda",
	"Saint Kitts and Nevis",
	"Saint Lucia",
	"Saint Martin",
	"Saint Pierre and Miquelon",
	"Saint Vincent and the Grenadines",
	"Samoa",
	"San Marino",
	"Sao Tome and Principe",
	"Saudi Arabia",
	"Senegal",
	"Serbia",
	"Seychelles",
	"Sierra Leone",
	"Singapore",
	"Sint Maarten",
	"Slovakia",
	"Slovenia",
	"Solomon Islands",
	"Somalia",
	"South Africa",
	"South Sudan",
	"Spain",
	"Sri Lanka",
	"Sudan",
	"Suriname",
	"Swaziland",
	"Sweden",
	"Switzerland",
	"Syria",
	"Taiwan",
	"Tajikistan",
	"Tanzania",
	"Thailand",
	"Timor-Leste",
	"Togo",
	"Tonga",
	"Trinidad and Tobago",
	"Tunisia",
	"Turkey",
	"Turkmenistan",
	"Tuvalu",
	"Uganda",
	"Ukraine",
	"United Arab Emirates",
	"United Kingdom",
	"United States",
	"Uruguay",
	"Uzbekistan",
	"Vanuatu",
	"Venezuela",
	"Vietnam",
	"Virgin Islands",
	"West Bank",
	"Yemen",
	"Zambia",
	"Zimbabwe"
]

var GDP = [
  21.71,
	13.4,
	227.8,
	0.75,
	4.8,
	131.4,
	0.18,
	1.24,
	536.2,
	10.88,
	2.52,
	1483,
	436.1,
	77.91,
	8.65,
	34.05,
	186.6,
	4.28,
	75.25,
	527.8,
	1.67,
	9.24,
	5.2,
	2.09,
	34.08,
	19.55,
	16.3,
	2244,
	1.1,
	17.43,
	55.08,
	13.38,
	65.29,
	3.04,
	1.98,
	16.9,
	32.16,
	1794,
	2.25,
	1.73,
	15.84,
	264.1,
	10360,
	400.1,
	0.72,
	32.67,
	14.11,
	0.18,
	50.46,
	33.96,
	57.18,
	77.15,
	5.6,
	21.34,
	205.6,
	347.2,
	1.58,
	0.51,
	64.05,
	100.5,
	284.9,
	25.14,
	15.4,
	3.87,
	26.36,
	49.86,
	0.16,
	2.32,
	4.17,
	276.3,
	2902,
	7.15,
	20.68,
	0.92,
	16.13,
	3820,
	35.48,
	1.85,
	246.4,
	2.16,
	0.84,
	4.6,
	58.3,
	2.74,
	1.04,
	6.77,
	3.14,
	8.92,
	19.37,
	292.7,
	129.7,
	16.2,
	2048,
	856.1,
	402.7,
	232.2,
	245.8,
	4.08,
	305,
	2129,
	13.92,
	4770,
	5.77,
	36.55,
	225.6,
	62.72,
	0.16,
	28,
	1410,
	5.99,
	179.3,
	7.65,
	11.71,
	32.82,
	47.5,
	2.46,
	2.07,
	49.34,
	5.11,
	48.72,
	63.93,
	51.68,
	10.92,
	11.19,
	4.41,
	336.9,
	2.41,
	12.04,
	10.57,
	0.18,
	4.29,
	12.72,
	1296,
	0.34,
	7.74,
	6.06,
	11.73,
	4.66,
	112.6,
	16.59,
	13.11,
	19.64,
	880.4,
	11.1,
	201,
	11.85,
	594.3,
	8.29,
	0.01,
	1.23,
	511.6,
	80.54,
	237.5,
	0.65,
	44.69,
	16.1,
	31.3,
	208.2,
	284.6,
	552.2,
	228.2,
	93.52,
	212,
	199,
	2057,
	8,
	0.81,
	1.35,
	0.56,
	0.22,
	0.75,
	0.83,
	1.86,
	0.36,
	777.9,
	15.88,
	42.65,
	1.47,
	5.41,
	307.9,
	304.1,
	99.75,
	49.93,
	1.16,
	2.37,
	341.2,
	11.89,
	1400,
	71.57,
	70.03,
	5.27,
	3.84,
	559.1,
	679,
	64.7,
	529.5,
	9.16,
	36.62,
	373.8,
	4.51,
	4.84,
	0.49,
	29.63,
	49.12,
	813.3,
	43.5,
	0.04,
	26.09,
	134.9,
	416.4,
	2848,
	17420,
	55.6,
	63.08,
	0.82,
	209.2,
	187.8,
	5.08,
	6.64,
	45.45,
	25.61,
	13.74
]

getDataSet = (dataset) => {
  switch(dataset) {
    case "alcohol":
      console.log("case = alcohol")

      var data = [{
        name: "Alcohol Consumption",
        type: 'choropleth',
        locationmode: 'country names',
        locations: countries,
        z: alcoholConsumed,
        text: countries,
        autocolorscale: true
      }];
      
      var layout = {
      title: 'Pure alcohol consumption<br>among adults (age 15+) in 2010',
      geo: {
        projection: {
            type: 'robinson'
          }
        }
      };
      Plotly.newPlot('graph1', data, layout, {showLink: false});
      break;
      case "apple":
          console.log("case = apple")

          title = 'Apple Stock Price 2014';
    
          var data = [{
            name: "Apple Stock Price 2014",
            type: 'scatter',
            x: appleStockDates,
            y: appleStock
          }];
          
          var layout = {
            title: title,
            yaxis: {zeroline: true, title: "Price in USD"},
            xaxis: {zeroline: true, title: "Date"}
          };
          Plotly.newPlot('graph1', data, layout, {showLink: false});
          break;
      case "apple2":
          Plotly.d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv", function(err, rows){
            function unpack(rows, key) {
            return rows.map(function(row) { return row[key]; });
          }
          
            var x = unpack(rows, 'Date')
            var y = unpack(rows, 'AAPL.Volume')
          
            var trace = {
              type: "scatter",
              mode: "lines",
              name: 'AAPL Volume',
              x: x,
              y: y,
            }
          
            var data = [trace]; 
              
          var layout = {
            title: 'Volume of Apple Shares Traded 2015-2017',
            xaxis: {
              title: 'Date',
              showticklabels: true,
              tickangle: 'auto',
            },
            yaxis: {
              title: 'Volume of Stock Traded',
              showticklabels: true,
              tickangle: 45,
            }
          };

          title = "Volume of Apple Shares Traded 2015-2017"
          
          Plotly.newPlot('graph1', data, layout);
          updatePlot(y);
          })
      case "gdp":
        console.log("case = gdp")

        title = "World GDP 2014 in Millions"
  
        var data = [{
          name: "World GDP",
          type: 'choropleth',
          locationmode: 'country names',
          locations: GDPNames,
          z: GDP,
          text: GDPNames,
          autocolorscale: true
        }];
        
        var layout = {
        title: 'World GDP 2014',
        geo: {
          projection: {
              type: 'robinson'
            }
          }
        };
        Plotly.newPlot('graph1', data, layout, {showLink: false});
        break;
      case "USCities":
          Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv', function(err, rows){

            function unpack(rows, key) {
                return rows.map(function(row) { return row[key]; });
            }
        
            var cityName = unpack(rows, 'name'),
                cityPop = unpack(rows, 'pop'),
                cityLat = unpack(rows, 'lat'),
                cityLon = unpack(rows, 'lon'),
                color = [,"rgb(255,65,54)","rgb(133,20,75)","rgb(255,133,27)","lightgrey"],
                citySize = [],
                hoverText = [],
                scale = 50000;
        
            for ( var i = 0 ; i < cityPop.length; i++) {
                var currentSize = cityPop[i] / scale;
                var currentText = cityName[i] + " pop: " + cityPop[i];
                citySize.push(currentSize);
                hoverText.push(currentText);
            }
        
            var data = [{
                type: 'scattergeo',
                locationmode: 'USA-states',
                lat: cityLat,
                lon: cityLon,
                hoverinfo: 'text',
                text: hoverText,
                marker: {
                    size: citySize,
                    line: {
                        color: 'black',
                        width: 2
                    },
                }
            }];
        
            var layout = {
                title: '2014 US City Populations',
                showlegend: false,
                geo: {
                    scope: 'usa',
                    projection: {
                        type: 'albers usa'
                    },
                    showland: true,
                    landcolor: 'rgb(217, 217, 217)',
                    subunitwidth: 1,
                    countrywidth: 1,
                    subunitcolor: 'rgb(255,255,255)',
                    countrycolor: 'rgb(255,255,255)'
                },
            };

            title = "2014 US City Populations";
        
            Plotly.newPlot("graph1", data, layout, {showLink: false});
            updatePlot(cityPop);
            
        });
      break;
      case "USExports":
        Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv', function(err, rows){
          function unpack(rows, key) {
              return rows.map(function(row) { return row[key]; });
          }
    
          var data = [{
              type: 'choropleth',
              locationmode: 'USA-states',
              locations: unpack(rows, 'code'),
              z: unpack(rows, 'total exports'),
              text: unpack(rows, 'state'),
              zmin: 0,
              zmax: 17000,
              colorscale: [
                  [0, 'rgb(242,240,247)'], [0.2, 'rgb(218,218,235)'],
                  [0.4, 'rgb(188,189,220)'], [0.6, 'rgb(158,154,200)'],
                  [0.8, 'rgb(117,107,177)'], [1, 'rgb(84,39,143)']
              ],
              colorbar: {
                  title: 'Millions USD',
                  thickness: 0.2
              },
              marker: {
                  line:{
                      color: 'rgb(255,255,255)',
                      width: 2
                  }
              }
          }];
    
    
          var layout = {
              title: '2011 US Agriculture Exports by State',
              geo:{
                  scope: 'usa',
                  showlakes: true,
                  lakecolor: 'rgb(255,255,255)'
              }
          };
          title = "2011 US Agricultural Exports by State"
          Plotly.newPlot("graph1", data, layout, {showLink: false});
          updatePlot(unpack(rows, 'total exports'))
      });
        break;
      case "USprec":
          Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/2015_06_30_precipitation.csv', function(err, rows){
            function unpack(rows, key) {
                return rows.map(function(row) { return row[key]; });
            }
      
       scl = [[0, 'rgb(150,0,90)'],[0.125, 'rgb(0, 0, 200)'],[0.25,'rgb(0, 25, 255)'],[0.375,'rgb(0, 152, 255)'],[0.5,'rgb(44, 255, 150)'],[0.625,'rgb(151, 255, 0)'],[0.75,'rgb(255, 234, 0)'],[0.875,'rgb(255, 111, 0)'],[1,'rgb(255, 0, 0)']];
      
          var data = [{
              type: 'scattergeo',
              mode: 'markers',
              text: unpack(rows, 'Globvalue'),
              lon: unpack(rows, 'Lon'),
              lat: unpack(rows, 'Lat'),
              marker: {
                color: unpack(rows, 'Globvalue'),
                colorscale: scl,
                cmin: 0,
                cmax: 1.4,
                reversescale: true,
                opacity: 0.2,
                size: 2,
                colorbar:{
                  thickness: 10,
                  titleside: 'right',
                  outlinecolor: 'rgba(68,68,68,0)',
                  ticks: 'outside',
                  ticklen: 3,
                  shoticksuffix: 'last',
                  ticksuffix: 'inches',
                  dtick: 0.1
                }
              },
              name: 'NA Precipitation'
          }];
      
          var layout = {
            geo:{
              scope: 'north america',
              showland: true,
              landcolor: 'rgb(212,212,212)',
              subunitcolor: 'rgb(255,255,255)',
              countrycolor: 'rgb(255,255,255)',
              showlakes: true,
              lakecolor: 'rgb(255,255,255)',
              showsubunits: true,
              showcountries: true,
              resolution: 50,
              projection: {
                type: 'conic conformal',
                rotation: {
                  long: -100
                }
              },
            },
            longaxis: {
              showgrid: true,
              gridwidth: 0.5,
              range: [ -140.0, -55.0 ],
              dtick: 5
            },
            lataxis: {
              showgrid: true,
              gridwidth: 0.5,
              range: [ 20.0, 60.0 ],
              dtick: 5
            },
            title: 'North America Precipitation',
            width: 800,
            height: 600
          };
      
          Plotly.newPlot('graph1', data, layout);
          title = "North America Precipitation"
          updatePlot(unpack(rows, 'Globvalue'))
        });
        break;
      case "statesize":
        Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_usa_states.csv', function(err, rows){
          function unpack(rows, key) {
            return rows.map(function(row) { return row[key]; });
            }
            var data = [{
            type: 'choropleth',
            locationmode: 'USA-states',
            locations: unpack(rows, 'Postal'),
            z: unpack(rows, 'Population'),
            text: unpack(rows, 'State'),
            autocolorscale: true
            }];

            var layout = {
            title: '2014 US Population by State',
            geo:{
                scope: 'usa',
                countrycolor: 'rgb(255, 255, 255)',
                showland: true,
                landcolor: 'rgb(217, 217, 217)',
                showlakes: true,
                lakecolor: 'rgb(255, 255, 255)',
                subunitcolor: 'rgb(255, 255, 255)',
                lonaxis: {},
                lataxis: {}
            }
            };
            title = "US States by Population Size 2014"
            Plotly.newPlot("graph1", data, layout, {showLink: false});
            updatePlot(unpack(rows, 'Population'));
            }); 
        break;
      default:
        break  
  }
}

updatePlot = (data) => {
  var layout = {
    title: title, 
    yaxis: {
      zeroline: false
    },
    yaxis2: {
      zeroline: false
    },
    width: 500, height: 700,
    yaxis: {zeroline: false},
  }
  
  var yVals = data; 
  var box = {
    y: yVals,
    name: "Box Plot",
    type: 'box',
  };
  
  var violin = {
    y: yVals,
    name: "Violin Plot",
    type: 'violin',
    points: 'none',
    box: {
      visible: true
    },
    line: {
      color: 'green',
    },
    meanline: {
      visible: true
    },
  };
  
  var data = [box, violin];

  Plotly.newPlot('graph', data, layout);
}

getData = (x) => {
  switch (x) {
    case "1":
      getDataSet("alcohol");
      updatePlot(alcoholConsumed);
      document.getElementById("data").innerHTML = "Alcohol Consumption";
      document.getElementById("special").innerHTML = "The violin plot here shows a lot more information about how the data is distributed.";
      break;
    case "2":
      getDataSet("apple");
      updatePlot(appleStock);
      document.getElementById("data").innerHTML = "Apple Stock Price";
      document.getElementById("special").innerHTML = "The violin plot here shows a lot more information about how the data is distributed.";
      break;
    case "3":
      getDataSet("apple2");
      document.getElementById("data").innerHTML = "Apple Stock Traded";
      document.getElementById("special").innerHTML = "The violin plot here shows a lot more information about how the data is distributed.";
      break;
    case "4":
      getDataSet("gdp");
      updatePlot(GDP);
      document.getElementById("data").innerHTML = "World GDP 2014";
      document.getElementById("special").innerHTML = "Even when the box plot becomes impossible to read, you can still gather some information from the violin plot.";
      break;
    case "5":
      getDataSet("USCities");
      document.getElementById("data").innerHTML = "US City Population";
      document.getElementById("special").innerHTML = "Even when the box plot becomes impossible to read, you can still gather some information from the violin plot.";
      break;
    case "6":
      getDataSet("USExports");
      document.getElementById("data").innerHTML = "US Agrigultural Exports";
      document.getElementById("special").innerHTML = "Here we can see how the large values are affect how the data is distrubuted. In a box plot, we only know that the large values exist."
      break;
    case "7":
      getDataSet("USprec");
      document.getElementById("data").innerHTML = "NA Precipitation";
      document.getElementById("special").innerHTML = "Here we can see how the large values are affect how the data is distrubuted. In a box plot, we only know that the large values exist."
      break;
    case "8":
      getDataSet("statesize");
      document.getElementById("data").innerHTML = "US State Population";
      document.getElementById("special").innerHTML = "Here we can see how the large values are affect how the data is distrubuted. In a box plot, we only know that the large values exist."
      break;
    default:
      break;
  }

}

getData("1");
document.getElementById("datadropdown").value = "1";

$("datadropdown").each(function () {
  $(this).on('datadropdown', function(){
    //getData(document.getElementById("datadropdown").value);
  });
});

/*Tabs*/
$(function() {
  $('ul.tab-nav li a.button').click(function() {
      var href = $(this).attr('href');
      $('li a.active.button', $(this).parent().parent()).removeClass('active');
      $(this).addClass('active');
      $('.tab-pane.active', $(href).parent()).removeClass('active');
      $(href).addClass('active');

      return false;
  });
});




